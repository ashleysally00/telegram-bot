import requests
from telegram import Update
from telegram.ext import CallbackContext

# General emoji mapping by categories
emoji_map = {
    "happy": ["😊", "😃", "🎉"],
    "sad": ["😢", "☹️", "💔"],
    "angry": ["😡", "🔥", "🤬"],
    "love": ["❤️", "😍", "💖"],
    "nature": ["🌳", "🌷", "🌞"],
    "default": ["🤔", "🔍", "✨"]  # Fallback emojis
}

def get_emojis(word, synonyms):
    # Check if the word itself has an emoji category
    if word in emoji_map:
        return emoji_map[word]
    
    # Check if any synonym matches an emoji category
    for synonym in synonyms:
        if synonym in emoji_map:
            return emoji_map[synonym]
    
    # Return default emojis if no match is found
    return emoji_map["default"]

# Thesaurus command
async def thesaurus(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("Usage: /thesaurus <word>")
        return

    word = context.args[0].lower()  # Normalize input to lowercase
    response = requests.get(f"https://api.datamuse.com/words?rel_syn={word}")
    
    if response.status_code == 200:
        data = response.json()
        if data:
            # Fetch up to 5 synonyms
            synonyms = [item['word'] for item in data[:5]]
            synonyms_text = f"Synonyms for '{word}': {', '.join(synonyms)}"

            # Get emojis based on the word and its synonyms
            emojis = get_emojis(word, synonyms)
            emojis_text = f"Here are some emojis that might match: {' '.join(emojis)}"

            # Send combined response
            await update.message.reply_text(f"{synonyms_text}\n\n{emojis_text}")
        else:
            await update.message.reply_text(f"Sorry, I couldn't find synonyms for '{word}'.")
    else:
        await update.message.reply_text("There was an error fetching thesaurus data.")
