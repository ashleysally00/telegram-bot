import requests
import pandas as pd
from telegram import Update
from telegram.ext import CallbackContext

# Load the emoji sentiment dataset
emoji_data = pd.read_csv("Emoji_Sentiment_Data_v1.0.csv")
  # Ensure this file is in your project folder

def get_emojis(word, synonyms):
    """
    Retrieve the top 3 emojis based on sentiment ranking.
    - Prioritize emojis related to the word or its synonyms.
    - Fall back to the top sentiment emojis if no direct match is found.
    """
    # Check if any synonyms or the word match the description in the dataset
    matching_emojis = emoji_data[
        emoji_data["Description"].str.contains(word, na=False, case=False)
        | emoji_data["Description"].str.contains('|'.join(synonyms), na=False, case=False)
    ]
    
    if not matching_emojis.empty:
        # Sort by Sentiment score (descending) and return top 3 emojis
        return list(matching_emojis.sort_values(by="Sentiment score", ascending=False).head(3)["Emoji"])
    else:
        # Fallback to the top sentiment-ranked emojis
        return list(emoji_data.sort_values(by="Sentiment score", ascending=False).head(3)["Emoji"])

# Thesaurus command
async def thesaurus(update: Update, context: CallbackContext):
    """
    Responds to the /thesaurus command with synonyms for the word
    and appropriate emojis based on sentiment ranking.
    """
    if not context.args:
        await update.message.reply_text("Usage: /thesaurus <word>")
        return

    word = context.args[0].lower()  # Normalize input to lowercase
    response = requests.get(f"https://api.datamuse.com/words?rel_syn={word}")
    
    if response.status_code == 200:
        data = response.json()
        if data:
            # Fetch up to 5 synonyms
            synonyms = [item['word'] for item in data[:5]]
            synonyms_text = f"Synonyms for '{word}': {', '.join(synonyms)}"

            # Get emojis based on sentiment ranking and context
            emojis = get_emojis(word, synonyms)
            emojis_text = f"Here are some emojis that might match: {' '.join(emojis)}"

            # Send combined response
            await update.message.reply_text(f"{synonyms_text}\n\n{emojis_text}")
        else:
            await update.message.reply_text(f"Sorry, I couldn't find synonyms for '{word}'.")
    else:
        await update.message.reply_text("There was an error fetching thesaurus data.")
